# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

$diff -tTrdbB --suppress-common-lines original/ altered/ > diff.txt

original/java/beans/AppletInitializer.java altered/java/beans/AppletInitializer.java
20d19
<	import java.applet.Applet;
25c24
<	    public void initialize(Applet newAppletBean, BeanContext bCtxt);
---
>	    public void initialize(Object newAppletBean, BeanContext bCtxt);
27c26
<	    public void activate(Applet newApplet);
---
>	    public void activate(Object newApplet);
Only in original/java/beans: AwtChoicePersistenceDelegate.java
Only in original/java/beans: AwtColorPersistenceDelegate.java
Only in original/java/beans: AwtComponentPersistenceDelegate.java
Only in original/java/beans: AwtContainerPersistenceDelegate.java
Only in original/java/beans: AwtCursorPersistenceDelegate.java
Only in original/java/beans: AwtDimensionPersistenceDelegate.java
Only in original/java/beans: AwtFontPersistenceDelegate.java
Only in original/java/beans: AwtFontTextAttributePersistenceDelegate.java
Only in original/java/beans: AwtInsetsPersistenceDelegate.java
Only in original/java/beans: AwtListPersistenceDelegate.java
Only in original/java/beans: AwtMenuBarPersistenceDelegate.java
Only in original/java/beans: AwtMenuPersistenceDelegate.java
Only in original/java/beans: AwtMenuShortcutPersistenceDelegate.java
Only in original/java/beans: AwtPointPersistenceDelegate.java
Only in original/java/beans: AwtRectanglePersistenceDelegate.java
Only in original/java/beans: AwtScrollPanePersistenceDelegate.java
Only in original/java/beans: AwtSystemColorPersistenceDelegate.java


original/java/beans/beancontext/BeanContextChildComponentProxy.java altered/java/beans/beancontext/BeanContextChildComponentProxy.java
20d19
<	import java.awt.Component;
24c23
<	    public Component getComponent();
---
>	    public Object getComponent();


original/java/beans/beancontext/BeanContextContainerProxy.java altered/java/beans/beancontext/BeanContextContainerProxy.java
20d19
<	import java.awt.Container;
24c23
<	    public Container getContainer();
---
>	    public Object getContainer();


original/java/beans/beancontext/BeanContextSupport.java altered/java/beans/beancontext/BeanContextSupport.java
20d19
<	import java.awt.Component;
817,819d815
<	                if (childs[i] instanceof Component) {
<	                    return true;
<	                }


original/java/beans/BeanInfo.java altered/java/beans/BeanInfo.java
20d19
<	import java.awt.Image;
42c41
<	    public Image getIcon(int iconKind);
---
>	    public Object getIcon(int iconKind);


original/java/beans/Beans.java altered/java/beans/Beans.java
20,24d19
<	import java.applet.Applet;
<	import java.applet.AppletContext;
<	import java.applet.AppletStub;
<	import java.applet.AudioClip;
<	import java.awt.Image;
201,204c196,199
<	                        if (result instanceof Applet) {
<	                                appletLoaded((Applet) result, loader, beanName, context,
<	                                                initializer, deserialized);
<	                        }
---
>	//                      if (result instanceof Applet) {
>	//                              appletLoaded((Applet) result, loader, beanName, context,
>	//                                              initializer, deserialized);
>	//                      }
316,451d310
<	    private static void appletLoaded(Applet applet, ClassLoader loader,
<	            String name, BeanContext context, AppletInitializer initializer,
<	            boolean deserialized) throws ClassNotFoundException {
<	
<	        // If there is an initializer
<	        if (initializer != null) {
<	            initializer.initialize(applet, context);
<	        } else {
<	            setStub(applet, loader, deserialized, name);
<	        }
<	
<	        if (!deserialized) {
<	            applet.init();
<	        }
<	
<	        if (initializer != null) {
<	            initializer.activate(applet);
<	        }
<	    }
<	
<	    private static void setStub(Applet applet, final ClassLoader loader,
<	            boolean serialized, String beanName) throws ClassNotFoundException {
<	        // Get path to the resource representing the applet.
<	        String pathName = beanName.replace('.', '/');
<	        final String resourceName = serialized ? pathName.concat(".ser") : pathName.concat(".class"); //$NON-NLS-1$ //$NON-NLS-2$
<	        URL objectUrl = AccessController
<	                .doPrivileged(new PrivilegedAction<URL>() {
<	                    public URL run() {
<	                        if (loader == null)
<	                            return ClassLoader.getSystemResource(resourceName);
<	                        return loader.getResource(resourceName);
<	                    }
<	                });
<	
<	        // If we can't get to the applet itself, the codebase and doc base are
<	        // left as null.
<	        if (objectUrl == null) {
<	            applet.setStub(getAppletStub(getStubAppletContext(applet),
<	                    null, null));
<	            return;
<	        }
<	
<	        // Try to decompose the resource URL to get to the doc/code URL
<	        String urlString = objectUrl.toExternalForm();
<	
<	        // This is the URL of the directory that contains the applet.
<	        int codeURLlength = urlString.length() - resourceName.length();
<	        URL codeBase = safeURL(urlString.substring(0, codeURLlength));
<	
<	        // URL of the document containing the applet.
<	        int docURLlength = urlString.lastIndexOf('/');
<	        URL docBase = safeURL(urlString.substring(0, docURLlength + 1));
<	
<	        applet.setStub(getAppletStub(getStubAppletContext(applet),
<	                codeBase, docBase));
<	    }
<	    
<	    
<	    private static AppletStub getAppletStub(final AppletContext context, final URL codeBase, final URL docBase) {
<	
<	        return new AppletStub() {
<	            public boolean isActive() {
<	                return true;
<	            }
<	
<	            public URL getDocumentBase() {
<	                return docBase;
<	            }
<	
<	            public URL getCodeBase() {
<	                return codeBase;
<	            }
<	
<	            public String getParameter(String name) {
<	                // Applet beans have no params.
<	                return null;
<	            }
<	
<	            public AppletContext getAppletContext() {
<	                return context;
<	            }
<	
<	            public void appletResize(int width, int height) {
<	                // Do nothing.
<	            }
<	        };
<	    }
<	
<	    private static AppletContext getStubAppletContext(final Applet target) {
<	        return new AppletContext() {
<	            public AudioClip getAudioClip(URL url) {
<	                return null;
<	            }
<	
<	            public synchronized Image getImage(URL url) {
<	                return null;
<	            }
<	
<	            public Applet getApplet(String name) {
<	                return null;
<	            }
<	
<	            public Enumeration<Applet> getApplets() {
<	                Vector<Applet> applets = new Vector<Applet>();
<	                applets.addElement(target);
<	                return applets.elements();
<	            }
<	
<	            public void showDocument(URL url) {
<	                // Do nothing.
<	            }
<	
<	            public void showDocument(URL url, String aTarget) {
<	                // Do nothing.
<	            }
<	
<	            public void showStatus(String status) {
<	                // Do nothing.
<	            }
<	
<	            public void setStream(String key, InputStream stream)
<	                    throws IOException {
<	                // Do nothing.
<	            }
<	
<	            public InputStream getStream(String key) {
<	                return null;
<	            }
<	
<	            public Iterator<String> getStreamKeys() {
<	                return null;
<	            }
<	        };
<	    }
<	    
<	


original/java/beans/Encoder.java altered/java/beans/Encoder.java
20,36c20
<	import java.awt.Choice;
<	import java.awt.Color;
<	import java.awt.Component;
<	import java.awt.Container;
<	import java.awt.Cursor;
<	import java.awt.Dimension;
<	import java.awt.Font;
<	import java.awt.Insets;
<	import java.awt.List;
<	import java.awt.Menu;
<	import java.awt.MenuBar;
<	import java.awt.MenuShortcut;
<	import java.awt.Point;
<	import java.awt.Rectangle;
<	import java.awt.ScrollPane;
<	import java.awt.SystemColor;
<	import java.awt.font.TextAttribute;
---
>	
45,49d28
<	import javax.swing.Box;
<	import javax.swing.DefaultComboBoxModel;
<	import javax.swing.JFrame;
<	import javax.swing.JTabbedPane;
<	import javax.swing.ToolTipManager;
108,137d86
<	        delegates.put(Choice.class, new AwtChoicePersistenceDelegate());
<	        delegates.put(Color.class, new AwtColorPersistenceDelegate());
<	        delegates.put(Container.class, new AwtContainerPersistenceDelegate());
<	        delegates.put(Component.class, new AwtComponentPersistenceDelegate());
<	        delegates.put(Cursor.class, new AwtCursorPersistenceDelegate());
<	        delegates.put(Dimension.class, new AwtDimensionPersistenceDelegate());
<	        delegates.put(Font.class, new AwtFontPersistenceDelegate());
<	        delegates.put(Insets.class, new AwtInsetsPersistenceDelegate());
<	        delegates.put(List.class, new AwtListPersistenceDelegate());
<	        delegates.put(Menu.class, new AwtMenuPersistenceDelegate());
<	        delegates.put(MenuBar.class, new AwtMenuBarPersistenceDelegate());
<	        delegates.put(MenuShortcut.class,
<	                new AwtMenuShortcutPersistenceDelegate());
<	        delegates.put(Point.class, new AwtPointPersistenceDelegate());
<	        delegates.put(Rectangle.class, new AwtRectanglePersistenceDelegate());
<	        delegates.put(SystemColor.class,
<	                new AwtSystemColorPersistenceDelegate());
<	        delegates.put(TextAttribute.class,
<	                new AwtFontTextAttributePersistenceDelegate());
<	
<	        delegates.put(Box.class, new SwingBoxPersistenceDelegate());
<	        delegates.put(JFrame.class, new SwingJFramePersistenceDelegate());
<	        delegates.put(JTabbedPane.class,
<	                new SwingJTabbedPanePersistenceDelegate());
<	        delegates.put(DefaultComboBoxModel.class,
<	                new SwingDefaultComboBoxModelPersistenceDelegate());
<	        delegates.put(ToolTipManager.class,
<	                new SwingToolTipManagerPersistenceDelegate());
<	        delegates.put(ScrollPane.class, new AwtScrollPanePersistenceDelegate());
<	


original/java/beans/PropertyEditor.java altered/java/beans/PropertyEditor.java
20,22c20,22
<	import java.awt.Component;
<	import java.awt.Graphics;
<	import java.awt.Rectangle;
---
>	
>	
>	
26c26
<	    public void paintValue(Graphics gfx, Rectangle box);
---
>	    public void paintValue(Object gfx, Object box);
44c44
<	    public Component getCustomEditor();
---
>	    public Object getCustomEditor();


original/java/beans/PropertyEditorSupport.java altered/java/beans/PropertyEditorSupport.java
19,21c19,21
<	import java.awt.Component;
<	import java.awt.Graphics;
<	import java.awt.Rectangle;
---
>	
>	
>	
49c49
<	    public void paintValue(Graphics gfx, Rectangle box) {
---
>	    public void paintValue(Object gfx, Object box) {
103c103
<	    public Component getCustomEditor() {
---
>	    public Object getCustomEditor() {


original/java/beans/SimpleBeanInfo.java altered/java/beans/SimpleBeanInfo.java
20,21c20,21
<	import java.awt.Image;
<	import java.awt.Toolkit;
---
>	
>	
30c30
<	    public Image loadImage(String resourceName) {
---
>	    public Object loadImage(String resourceName) {
38c38
<	            return Toolkit.getDefaultToolkit().createImage(file);
---
>	            return null;
63c63
<	    public Image getIcon(int iconKind) {
---
>	    public Object getIcon(int iconKind) {


original/java/beans/StandardBeanInfo.java altered/java/beans/StandardBeanInfo.java
22c22
<	import java.awt.Image;
---
>	
90c90
<	    private Image[] icon = new Image[4];
---
>	
131,133c131,133
<	            for (int i = 0; i < 4; i++) {
<	                icon[i] = explicitBeanInfo.getIcon(i + 1);
<	            }
---
>	
>	            
>	            
198,199c198,199
<	    public Image getIcon(int iconKind) {
<	        return icon[iconKind - 1];
---
>	    public Object getIcon(int iconKind) {
>	        return null;
Only in original/java/beans: SwingAbstractButtonPersistenceDelegate.java
Only in original/java/beans: SwingBoxPersistenceDelegate.java
Only in original/java/beans: SwingDefaultComboBoxModelPersistenceDelegate.java
Only in original/java/beans: SwingJFramePersistenceDelegate.java
Only in original/java/beans: SwingJTabbedPanePersistenceDelegate.java
Only in original/java/beans: SwingToolTipManagerPersistenceDelegate.java


original/java/beans/XMLEncoder.java altered/java/beans/XMLEncoder.java
21c21
<	import java.awt.SystemColor;
---
>	
484c484
<	                if(target == SystemColor.class || target == TextAttribute.class) {
---
>	                if(target == TextAttribute.class) {
Only in altered/org/apache/commons/scxml/env: StopWatch.java
Only in altered/org/apache/commons/scxml/env: stopwatch.xml
Only in altered/org/apache/commons/scxml: samples
Only in original/org/apache/harmony/beans/editors: ColorEditor.java
Only in original/org/apache/harmony/beans/editors: FontEditor.java


original/org/apache/harmony/beans/internal/nls/Messages.java altered/org/apache/harmony/beans/internal/nls/Messages.java
33,34d32
<	import org.apache.harmony.kernel.vm.VM;
<	
221c219,220
<	            final ClassLoader loader = VM.bootCallerClassLoader();
---
>	                //pass androids classloader in?
>	                final ClassLoader loader = null;        
